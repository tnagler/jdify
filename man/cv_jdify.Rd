% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv_jdify.R
\name{cv_jdify}
\alias{cv_jdify}
\title{Cross validation for joint density classification}
\usage{
cv_jdify(formula, data, jd_method = "cctools", folds = 10, cores = 1, ...)
}
\arguments{
\item{formula}{an object of class "formula"; same as \code{\link[stats:lm]{stats::lm()}}.}

\item{data}{matrix, data frame, list or environment (or object coercible by
\code{\link[base:as.data.frame]{base::as.data.frame()}}) containing the variables in the model.}

\item{jd_method}{an object of class \code{"jd_method"} defining the method for joint
density estimation, see \code{\link[=jd_method]{jd_method()}}.}

\item{folds}{number of folds.}

\item{cores}{number of cores for parallelized cross validation (based on
\code{\link[foreach:foreach]{foreach::foreach()}}).}

\item{...}{further arguments passed to \code{fit_fun()}.}
}
\value{
A list with elements
\itemize{
\item{\code{folds1``, ...,}foldsk\code{: }{for each fold: the fitted model}$fit\code{, estimated conditional probabilities (}$probs\code{), and indexes for training and test data (}$train_index\code{,}$test_index`).}

\item{\code{cv_probs}: }{aggragated out-of-sample \code{probs} in same order as original
data.}
}
}
\description{
Performs k-fold cross validation for a \code{jdify} object.
}
\examples{
# simulate training and test data
dat <- data.frame(
    cl = as.factor(rbinom(100, 1, 0.5)),
    x1 = rnorm(100),
    x2 =  ordered(rbinom(10, 1, 0.3), 0:1)
)

cv <- cv_jdify(cl ~ x1 + x2, dat)
probs <- cv$cv_probs
assess_clsfyr(probs[, 1], dat[, 1] == 0, measure = c("ACC", "F1"))

}

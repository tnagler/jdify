% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clsfyr.R
\name{clsfyr_performance}
\alias{clsfyr_performance}
\title{Classification performance measures}
\usage{
clsfyr_performance(scores, true_cl, threshold = 0.5)
}
\arguments{
\item{scores}{probabilities or scores for class 1 (1 - prob of class 2);
scores are assumed to be in \eqn{[0, 1]} and high scores correspond to high
probability.}

\item{true_cl}{vector of true class labels.}

\item{threshold}{threshold for prediction, see \code{\link[jdify:predict.jdify]{jdify::predict.jdify()}}.}
}
\value{
A data.frame where each column corresponds to one value of \code{threshold}.
The corresponding values can be found with \code{attr(result, "threshold")}.
}
\description{
Calculates performance measures for a calssifier Assumes there are two
classes, and the first of \code{level(true_cl)} is to be predicted (the
"positive").
}
\examples{
# simulate training and test data
dat <- data.frame(
    cl = as.factor(rbinom(10, 1, 0.5)),
    x1 = rnorm(10),
    x2 = rbinom(10, 1, 0.3)
)

model <- jdify(cl ~ x1 + x2, data = dat)       # joint density fit
probs <- predict(model, dat, what = "cprobs")  # conditional probabilities

# calculate performance measures
t <- seq(0, 1, by = 0.05)
perf <- clsfyr_performance(scores = probs[, 1], dat[, 1], threshold = t)

# ROC plot
plot(t(perf[c("TPR", "FPR"), ]), type = "l", xlim = c(0, 1), ylim = c(0, 1))
abline(0, 1)

}
